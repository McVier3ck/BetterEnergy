package tk.mcvier3ck.moreenergy.tileentity.machine;

import cofh.api.energy.EnergyStorage;
import cofh.api.energy.IEnergyReceiver;
import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.inventory.ISidedInventory;
import net.minecraft.item.ItemStack;
import net.minecraft.nbt.NBTTagCompound;
import net.minecraft.nbt.NBTTagList;
import net.minecraft.network.NetworkManager;
import net.minecraft.network.Packet;
import net.minecraft.network.play.server.S35PacketUpdateTileEntity;
import net.minecraft.tileentity.TileEntity;
import net.minecraftforge.common.util.ForgeDirection;

public class BasicTileEntityMachine extends TileEntity implements ISidedInventory, IEnergyReceiver{

	public static int[] slotsOut = new int[] { 0 };
	public static int[] slotsIn = new int[] { 0 };
	public ItemStack[] slots;
	public String customeName = "";
	public int StackLimit = 64;
	
	
	public int energyReceive;
	public int energySend;
	public boolean canConnect = true;;
	public EnergyStorage powerHandler = new EnergyStorage(10, 10, 0);
	
	public int tick = 0;
	public int work = 0;
	
	
	
	
	public int getSizeInventory() {
		return slots.length;
	}

	
	public ItemStack getStackInSlot(int slot) {
		return slots[slot];
	}

	
	public ItemStack decrStackSize(int slot, int count) {
		if (this.slots[slot] != null) {
			ItemStack itemstack;

			if (this.slots[slot].stackSize <= count) {
				itemstack = slots[slot];
				this.slots[slot] = null;
				return itemstack;
			} else {
				itemstack = this.slots[slot].splitStack(count);

				if (this.slots[slot].stackSize == 0) {
					this.slots[slot] = null;
				}

				return itemstack;
			}
		} else {
			return null;
		}
	}

	
	public ItemStack getStackInSlotOnClosing(int slot) {
		ItemStack item = getStackInSlot(slot);
		if (item != null)
			setInventorySlotContents(slot, null);
		return item;
	}

	
	public void setInventorySlotContents(int slot, ItemStack itemstack) {
		slots[slot] = itemstack;
		if (itemstack != null && itemstack.stackSize > getInventoryStackLimit()) {
			itemstack.stackSize = getInventoryStackLimit();
		}
		
	}

	
	public String getInventoryName() {
		return customeName;
	}

	
	public boolean hasCustomInventoryName() {
		if(customeName != null) return true;
		return false;
	}

	
	public int getInventoryStackLimit() {
		return StackLimit;
	}

	
	public boolean isUseableByPlayer(EntityPlayer player) {
		return this.worldObj.getTileEntity(xCoord, yCoord, zCoord) == this
				&& player.getDistanceSq(xCoord + 0.5F, yCoord + 0.5F, zCoord + 0.5F) < 64;
	}


	
	public int receiveEnergy(ForgeDirection from, int maxReceive, boolean simulate) {
		return this.powerHandler.receiveEnergy(maxReceive, simulate);
	}

	
	public int getEnergyStored(ForgeDirection from) {
		return powerHandler.getEnergyStored();
	}

	
	public int getMaxEnergyStored(ForgeDirection from) {
		return powerHandler.getMaxEnergyStored();
	}

	
	public boolean canConnectEnergy(ForgeDirection from) {
		return canConnect;
	}

	
	
	public int[] getAccessibleSlotsFromSide(int side) {

		return slotsIn;

	}

	
	public boolean canInsertItem(int slot, ItemStack itemstack, int side) {
		for(int i : slotsIn){
			if(slot == i) return true;
		}
		return false;
	}

	
	public boolean canExtractItem(int slot, ItemStack itemstack, int side) {
		for(int i : slotsOut){
			if(slot == i) return true;
		}
		return false;
	}

	public int getWork() {
		return work;
	}

	public int getTick() {
		return tick;
	}
	
	
	public Packet getDescriptionPacket() {
		NBTTagCompound compound = new NBTTagCompound();

		NBTTagList nbttaglist = new NBTTagList();

		for (int i = 0; i < this.slots.length; ++i) {
			if (this.slots[i] != null) {
				NBTTagCompound nbttagcompound1 = new NBTTagCompound();
				nbttagcompound1.setByte("Slot", (byte) i);
				this.slots[i].writeToNBT(nbttagcompound1);
				nbttaglist.appendTag(nbttagcompound1);
			}
		}

		compound.setTag("Items", nbttaglist);

		compound.setInteger("Tick", tick);
		compound.setInteger("Work", work);

		this.powerHandler.writeToNBT(compound);
		return new S35PacketUpdateTileEntity(this.xCoord, this.yCoord, this.zCoord, 1, compound);

	}



	@Override
	public void openInventory() {
		
	}


	@Override
	public void closeInventory() {
		
	}


	@Override
	public boolean isItemValidForSlot(int p_94041_1_, ItemStack p_94041_2_) {
		return false;
	}


}
