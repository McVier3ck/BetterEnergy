package tk.mcvier3ck.moreenergy.tileentity.machine;

import cofh.api.energy.EnergyStorage;
import net.minecraft.item.ItemStack;
import net.minecraft.nbt.NBTTagCompound;
import net.minecraft.nbt.NBTTagList;
import net.minecraft.network.NetworkManager;
import net.minecraft.network.Packet;
import net.minecraft.network.play.server.S35PacketUpdateTileEntity;
import tk.mcvier3ck.moreenergy.block.EnergyInfuserBlock;
import tk.mcvier3ck.moreenergy.crafting.EnergyInfuserCraftingRecipe;

public class MachineEnergyInfuser extends BasicTileEntityMachine {

	boolean cached = false;
	public int tick = 0;
	public int work = 0;
	public int worktime = 20 * 6;

	public MachineEnergyInfuser() {
		slots = new ItemStack[5];
		slotsOut = new int[] { 0 };
		slotsIn = new int[] { 0, 1, 2, 3, 4 };
		customeName = "Energy Storage";
		
		powerHandler = new EnergyStorage(30000, 10000, 0);
		
	}

	public void work() {
		if (worldObj.isRemote)
			return;
		if (slots[1] != null && slots[2] != null && slots[3] != null && slots[4] != null) {
			if (EnergyInfuserCraftingRecipe.canCraft(slots)) {
				if (powerHandler.getEnergyStored() >= EnergyInfuserCraftingRecipe.getEnergycost(slots)) {
					tick++;
					powerHandler.modifyEnergyStored(-EnergyInfuserCraftingRecipe.getEnergycost(slots) / 120);
					work++;
				} else {
					reset();
					return;
				}

			} else {
				reset();
				return;
			}

			if (tick >= worktime) {
				reset();
				EnergyInfuserCraftingRecipe.infuseditem(slots);
				return;
			}

		} else {

			reset();
			return;
		}
		if (tick == 1) {
			EnergyInfuserBlock.updateWork(true, worldObj, xCoord, yCoord, zCoord);
		}

		return;
	}

	public void reset() {
		work = 0;
		tick = 0;
		EnergyInfuserBlock.updateWork(false, worldObj, xCoord, yCoord, zCoord);
		markDirty();

	}



	@Override
	public void updateEntity() {
		work();
		super.updateEntity();
		worldObj.markBlockForUpdate(xCoord, yCoord, zCoord);
	}
	
	public void onDataPacket(NetworkManager net, S35PacketUpdateTileEntity pkt) {
		readFromNBT(pkt.func_148857_g());
	}

	public void readFromNBT(NBTTagCompound par1) {
		
		super.readFromNBT(par1);
		NBTTagList nbttaglist = par1.getTagList("Items", 10);
		this.slots = new ItemStack[this.getSizeInventory()];

		if (par1.hasKey("CustomName", 8)) {
			this.customeName = par1.getString("CustomName");
		}

		for (int i = 0; i < nbttaglist.tagCount(); ++i) {
			NBTTagCompound nbttagcompound1 = nbttaglist.getCompoundTagAt(i);
			byte b0 = nbttagcompound1.getByte("Slot");

			if (b0 >= 0 && b0 < this.slots.length) {
				this.slots[b0] = ItemStack.loadItemStackFromNBT(nbttagcompound1);
			}
		}
		work = par1.getInteger("Work");
		tick = par1.getInteger("Tick");

		this.powerHandler.readFromNBT(par1);
	}

	public void writeToNBT(NBTTagCompound par1) {
		
		NBTTagList nbttaglist = new NBTTagList();

		for (int i = 0; i < this.slots.length; ++i) {
			if (this.slots[i] != null) {
				NBTTagCompound nbttagcompound1 = new NBTTagCompound();
				nbttagcompound1.setByte("Slot", (byte) i);
				this.slots[i].writeToNBT(nbttagcompound1);
				nbttaglist.appendTag(nbttagcompound1);
			}
		}

		par1.setTag("Items", nbttaglist);

		if (this.hasCustomInventoryName()) {
			par1.setString("CustomName", customeName);
		}
		par1.setInteger("Tick", tick);
		par1.setInteger("Work", work);

		this.powerHandler.writeToNBT(par1);
	}

	public Packet getDescriptionPacket() {
		
		NBTTagCompound compound = new NBTTagCompound();

		NBTTagList nbttaglist = new NBTTagList();

		for (int i = 0; i < this.slots.length; ++i) {
			if (this.slots[i] != null) {
				NBTTagCompound nbttagcompound1 = new NBTTagCompound();
				nbttagcompound1.setByte("Slot", (byte) i);
				this.slots[i].writeToNBT(nbttagcompound1);
				nbttaglist.appendTag(nbttagcompound1);
			}
		}

		compound.setTag("Items", nbttaglist);

		compound.setInteger("Tick", tick);
		compound.setInteger("Work", work);

		this.powerHandler.writeToNBT(compound);
		return new S35PacketUpdateTileEntity(this.xCoord, this.yCoord, this.zCoord, 1, compound);

	}

	
	
	public int getWork() {
		return work;
	}

	public int getTick() {
		return tick;
	}
	
}
